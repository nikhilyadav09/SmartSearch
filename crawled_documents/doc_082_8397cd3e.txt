In computer science, locality-sensitive hashing (LSH) is a fuzzy hashing technique that hashes similar input items into the same "buckets" with high probability.[1] (The number of buckets is much smaller than the universe of possible input items.)[1] Since similar items end up in the same buckets, this technique can be used for data clustering and nearest neighbor search. It differs from conventional hashing techniques in that hash collisions are maximized, not minimized. Alternatively, the technique can be seen as a way to reduce the dimensionality of high-dimensional data; high-dimensional input items can be reduced to low-dimensional versions while preserving relative distances between items. Hashing-based approximate nearest-neighbor search algorithms generally use one of two main categories of hashing methods: either data-independent methods, such as locality-sensitive hashing (LSH); or data-dependent methods, such as locality-preserving hashing (LPH).[2][3] Locality-preserving hashing was initially devised as a way to facilitate data pipelining in implementations of massively parallel algorithms that use randomized routing and universal hashing to reduce memory contention and network congestion.[4][5] Definitions A finite family F {\displaystyle {\mathcal {F}}} of functions h : M → S {\displaystyle h\colon M\to S} is defined to be an LSH family[1][6][7] for if it satisfies the following condition. For any two points a , b ∈ M {\displaystyle a,b\in M} and a hash function h {\displaystyle h} chosen uniformly at random from F {\displaystyle {\mathcal {F}}} : Such a family F {\displaystyle {\mathcal {F}}} is called ( r , c r , p 1 , p 2 ) {\displaystyle (r,cr,p_{1},p_{2})} -sensitive. LSH with respect to a similarity measure Alternatively[8] it is possible to define an LSH family on a universe of items U endowed with a similarity function ϕ : U × U → [ 0 , 1 ] {\displaystyle \phi \colon U\times U\to [0,1]} . In this setting, a LSH scheme is a family of hash functions H coupled with a probability distribution D over H such that a function h ∈ H {\displaystyle h\in H} chosen according to D satisfies P r [ h ( a ) = h ( b ) ] = ϕ ( a , b ) {\displaystyle Pr[h(a)=h(b)]=\phi (a,b)} for each a , b ∈ U {\displaystyle a,b\in U} . Amplification Given a ( d 1 , d 2 , p 1 , p 2 ) {\displaystyle (d_{1},d_{2},p_{1},p_{2})} -sensitive family F {\displaystyle {\mathcal {F}}} , we can construct new families G {\displaystyle {\mathcal {G}}} by either the AND-construction or OR-construction of F {\displaystyle {\mathcal {F}}} .[1] To create an AND-construction, we define a new family G {\displaystyle {\mathcal {G}}} of hash functions g, where each function g is constructed from k random functions h 1 , … , h k {\displaystyle h_{1},\ldots ,h_{k}} from F {\displaystyle {\mathcal {F}}} . We then say that for a hash function g ∈ G {\displaystyle g\in {\mathcal {G}}} , g ( x ) = g ( y ) {\displaystyle g(x)=g(y)} if and only if all h i ( x ) = h i ( y ) {\displaystyle h_{i}(x)=h_{i}(y)} for i = 1 , 2 , … , k {\displaystyle i=1,2,\ldots ,k} . Since the members of F {\displaystyle {\mathcal {F}}} are independently chosen for any g ∈ G {\displaystyle g\in {\mathcal {G}}} , G {\displaystyle {\mathcal {G}}} is a ( d 1 , d 2 , p 1 k , p 2 k ) {\displaystyle (d_{1},d_{2},p_{1}^{k},p_{2}^{k})} -sensitive family. To create an OR-construction, we define a new family G {\displaystyle {\mathcal {G}}} of hash functions g, where each function g is constructed from k random functions h 1 , … , h k {\displaystyle h_{1},\ldots ,h_{k}} from F {\displaystyle {\mathcal {F}}} . We then say that for a hash function g ∈ G {\displaystyle g\in {\mathcal {G}}} , g ( x ) = g ( y ) {\displaystyle g(x)=g(y)} if and only if h i ( x ) = h i ( y ) {\displaystyle h_{i}(x)=h_{i}(y)} for one or more values of i. Since the members of F {\displaystyle {\mathcal {F}}} are independently chosen for any g ∈ G {\displaystyle g\in {\mathcal {G}}} , G {\displaystyle {\mathcal {G}}} is a ( d 1 , d 2 , 1 − ( 1 − p 1 ) k , 1 − ( 1 − p 2 ) k ) {\displaystyle (d_{1},d_{2},1-(1-p_{1})^{k},1-(1-p_{2})^{k})} -sensitive family. Applications LSH has been applied to several problem domains, including: Methods Bit sampling for Hamming distance One of the easiest ways to construct an LSH family is by bit sampling.[7] This approach works for the Hamming distance over d-dimensional vectors { 0 , 1 } d {\displaystyle \{0,1\}^{d}} . Here, the family F {\displaystyle {\mathcal {F}}} of hash functions is simply the family of all the projections of points on one of the d {\displaystyle d} coordinates, i.e., F = { h : { 0 , 1 } d → { 0 , 1 } ∣ h ( x ) = x i for some i ∈ { 1 , … , d } } {\displaystyle {\mathcal {F}}=\{h\colon \{0,1\}^{d}\to \{0,1\}\mid h(x)=x_{i}{\text{ for some }}i\in \{1,\ldots ,d\}\}} , where x i {\displaystyle x_{i}} is the i {\displaystyle i} th coordinate of x {\displaystyle x} . A random function h {\displaystyle h} from F {\displaystyle {\mathcal {F}}} simply selects a random bit from the input point. This family has the following parameters: P 1 = 1 − R / d {\displaystyle P_{1}=1-R/d} , P 2 = 1 − c R / d {\displaystyle P_{2}=1-cR/d} . That is, any two vectors x , y {\displaystyle x,y} with Hamming distance at most R {\displaystyle R} collide under a random h {\displaystyle h} with probability at least P 1 {\displaystyle P_{1}} . Any x , y {\displaystyle x,y} with Hamming distance at least c R {\displaystyle cR} collide with probability at most P 2 {\displaystyle P_{2}} . Min-wise independent permutations Suppose U is composed of subsets of some ground set of enumerable items S and the similarity function of interest is the Jaccard index J. If π is a permutation on the indices of S, for A ⊆ S {\displaystyle A\subseteq S} let h ( A ) = min a ∈ A { π ( a ) } {\displaystyle h(A)=\min _{a\in A}\{\pi (a)\}} . Each possible choice of π defines a single hash function h mapping input sets to elements of S. Define the function family H to be the set of all such functions and let D be the uniform distribution. Given two sets A , B ⊆ S {\displaystyle A,B\subseteq S} the event that h ( A ) = h ( B ) {\displaystyle h(A)=h(B)} corresponds exactly to the event that the minimizer of π over A ∪ B {\displaystyle A\cup B} lies inside A ∩ B {\displaystyle A\cap B} . As h was chosen uniformly at random, P r [ h ( A ) = h ( B ) ] = J ( A , B ) {\displaystyle Pr[h(A)=h(B)]=J(A,B)\,} and ( H , D ) {\displaystyle (H,D)\,} define an LSH scheme for the Jaccard index. Because the symmetric group on n elements has size n!, choosing a truly random permutation from the full symmetric group is infeasible for even moderately sized n. Because of this fact, there has been significant work on finding a family of permutations that is "min-wise independent" — a permutation family for which each element of the domain has equal probability of being the minimum under a randomly chosen π. It has been established that a min-wise independent family of permutations is at least of size lcm ⁡ { 1 , 2 , … , n } ≥ e n − o ( n ) {\displaystyle \operatorname {lcm} \{\,1,2,\ldots ,n\,\}\geq e^{n-o(n)}} ,[20] and that this bound is tight.[21] Because min-wise independent families are too big for practical applications, two variant notions of min-wise independence are introduced: restricted min-wise independent permutations families, and approximate min-wise independent families. Restricted min-wise independence is the min-wise independence property restricted to certain sets of cardinality at most k.[22] Approximate min-wise independence differs from the property by at most a fixed ε.[23] Open source methods Nilsimsa Hash Nilsimsa is a locality-sensitive hashing algorithm used in anti-spam efforts.[24] The goal of Nilsimsa is to generate a hash digest of an email message such that the digests of two similar messages are similar to each other. The paper suggests that the Nilsimsa satisfies three requirements: Testing performed in the paper on a range of file types identified the Nilsimsa hash as having a significantly higher false positive rate when compared to other similarity digest schemes such as TLSH, Ssdeep and Sdhash.[25] TLSH TLSH is locality-sensitive hashing algorithm designed for a range of security and digital forensic applications.[18] The goal of TLSH is to generate hash digests for messages such that low distances between digests indicate that their corresponding messages are likely to be similar. An implementation of TLSH is available as open-source software.[26] Random projection The random projection method of LSH due to Moses Charikar[8] called SimHash (also sometimes called arccos[27]) uses an approximation of the cosine distance between vectors. The technique was used to approximate the NP-complete max-cut problem.[8] The basic idea of this technique is to choose a random hyperplane (defined by a normal unit vector r) at the outset and use the hyperplane to hash input vectors. Given an input vector v and a hyperplane defined by r, we let h ( v ) = sgn ⁡ ( v ⋅ r ) {\displaystyle h(v)=\operatorname {sgn}(v\cdot r)} . That is, h ( v ) = ± 1 {\displaystyle h(v)=\pm 1} depending on which side of the hyperplane v lies. This way, each possible choice of a random hyperplane r can be interpreted as a hash function h ( v ) {\displaystyle h(v)} . For two vectors u,v with angle θ ( u , v ) {\displaystyle \theta (u,v)} between them, it can be shown that Since the ratio between θ ( u , v ) π {\displaystyle {\frac {\theta (u,v)}{\pi }}} and 1 − cos ⁡ ( θ ( u , v ) ) {\displaystyle 1-\cos(\theta (u,v))} is at least 0.439 when θ ( u , v ) ∈ [ 0 , π ] {\displaystyle \theta (u,v)\in [0,\pi ]} ,[8][28] the probability of two vectors being on different sides of the random hyperplane is approximately proportional to the cosine distance between them. Stable distributions The hash function [29] h a , b ( υ ) : R d → N {\displaystyle h_{\mathbf {a} ,b}({\boldsymbol {\upsilon }}):{\mathcal {R}}^{d}\to {\mathcal {N}}} maps a d-dimensional vector υ {\displaystyle {\boldsymbol {\upsilon }}} onto the set of integers. Each hash function in the family is indexed by a choice of random a {\displaystyle \mathbf {a} } and b {\displaystyle b} where a {\displaystyle \mathbf {a} } is a d-dimensional vector with entries chosen independently from a stable distribution and b {\displaystyle b} is a real number chosen uniformly from the range [0,r]. For a fixed a , b {\displaystyle \mathbf {a} ,b} the hash function h a , b {\displaystyle h_{\mathbf {a} ,b}} is given by h a , b ( υ ) = ⌊ a ⋅ υ + b r ⌋ {\displaystyle h_{\mathbf {a} ,b}({\boldsymbol {\upsilon }})=\left\lfloor {\frac {\mathbf {a} \cdot {\boldsymbol {\upsilon }}+b}{r}}\right\rfloor } . Other construction methods for hash functions have been proposed to better fit the data. [30] In particular k-means hash functions are better in practice than projection-based hash functions, but without any theoretical guarantee. Semantic hashing Semantic hashing is a technique that attempts to map input items to addresses such that closer inputs have higher semantic similarity.[31] The hashcodes are found via training of an artificial neural network or graphical model.[citation needed] Algorithm for nearest neighbor search One of the main applications of LSH is to provide a method for efficient approximate nearest neighbor search algorithms. Consider an LSH family F {\displaystyle {\mathcal {F}}} . The algorithm has two main parameters: the width parameter k and the number of hash tables L. In the first step, we define a new family G {\displaystyle {\mathcal {G}}} of hash functions g, where each function g is obtained by concatenating k functions h 1 , … , h k {\displaystyle h_{1},\ldots ,h_{k}} from F {\displaystyle {\mathcal {F}}} , i.e., g ( p ) = [ h 1 ( p ) , … , h k ( p ) ] {\displaystyle g(p)=[h_{1}(p),\ldots ,h_{k}(p)]} . In other words, a random hash function g is obtained by concatenating k randomly chosen hash functions from F {\displaystyle {\mathcal {F}}} . The algorithm then constructs L hash tables, each corresponding to a different randomly chosen hash function g. In the preprocessing step we hash all n d-dimensional points from the data set S into each of the L hash tables. Given that the resulting hash tables have only n non-zero entries, one can reduce the amount of memory used per each hash table to O ( n ) {\displaystyle O(n)} using standard hash functions. Given a query point q, the algorithm iterates over the L hash functions g. For each g considered, it retrieves the data points that are hashed into the same bucket as q. The process is stopped as soon as a point within distance cR from q is found. Given the parameters k and L, the algorithm has the following performance guarantees: For a fixed approximation ratio c = 1 + ϵ {\displaystyle c=1+\epsilon } and probabilities P 1 {\displaystyle P_{1}} and P 2 {\displaystyle P_{2}} , one can set k = ⌈ log ⁡ n log ⁡ 1 / P 2 ⌉ {\displaystyle k=\left\lceil {\tfrac {\log n}{\log 1/P_{2}}}\right\rceil } and L = ⌈ P 1 − k ⌉ = O ( n ρ P 1 − 1 ) {\displaystyle L=\lceil P_{1}^{-k}\rceil =O(n^{\rho }P_{1}^{-1})} , where ρ = log ⁡ P 1 log ⁡ P 2 {\displaystyle \rho ={\tfrac {\log P_{1}}{\log P_{2}}}} . Then one obtains the following performance guarantees: Improvements When t is large, it is possible to reduce the hashing time from O ( n ρ ) {\displaystyle O(n^{\rho })} . This was shown by[32] and[33] which gave It is also sometimes the case that the factor 1 / P 1 {\displaystyle 1/P_{1}} can be very large. This happens for example with Jaccard similarity data, where even the most similar neighbor often has a quite low Jaccard similarity with the query. In[34] it was shown how to reduce the query time to O ( n ρ / P 1 1 − ρ ) {\displaystyle O(n^{\rho }/P_{1}^{1-\rho })} (not including hashing costs) and similarly the space usage. See also References Further reading External links